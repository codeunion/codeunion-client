#!/usr/bin/env ruby
# encoding: UTF-8

# Resolve the pathname for this executable
require "pathname"
bin_file = Pathname.new(__FILE__).realpath

# Add the gem's "lib" directory to library path
$LOAD_PATH.unshift File.expand_path("../../lib", bin_file)

require "codeunion/command/config"
require "optparse"

options = {}
subtext = <<HELP
Commands are:
  get NAME       - Retrieves and prints the named configuration value.
  set NAME VALUE - Sets the named configuration to the given value.
  unset NAME     - Removes the named configuration value.

See 'codeunion config COMMAND --help' for more information on a specific command.
HELP
parser = OptionParser.new do |opts|
  opts.instance_exec do
    self.banner = "Usage: codeunion config COMMAND"
    separator ""

    separator subtext
    separator ""

    separator "Global options:"
    on_tail("-d", "--[no-]debug", "Adds debug output.") do |debug|
      options[:debug] = debug
    end

    on_tail("-h", "--help", "Print this help message") do
      puts self
      exit
    end
  end
end

commands = {}
get_subtext = <<HELP
Displays config variable NAME.  NAME may be a top-level key (i.e.  'codeunion')
or nested, (i.e.  'codeunion.slack.username')
HELP
commands["get"] = OptionParser.new do |opts|
  opts.instance_exec do
    self.banner = "Usage: codeunion config get NAME"

    separator ""
    separator get_subtext
    separator ""

    separator "Options:"
    on_tail("-h", "--help", "Print this help message") do
      puts self
      exit
    end
  end
end

set_subtext = <<HELP
Sets config variable NAME to VALUE. NAME may be a top-level key (i.e.  'codeunion')
or nested, (i.e.  'codeunion.slack.username').
HELP

commands["set"] = OptionParser.new do |opts|
  opts.instance_exec do
    self.banner = "Usage: codeunion config set NAME VALUE"

    separator ""
    separator set_subtext
    separator ""

    separator "Options:"
    on_tail("-h", "--help", "Print this help message") do
      puts self
      exit
    end
  end
end

unset_subtext = <<HELP
Unsets config variable NAME. NAME may be a top-level key (i.e.  'codeunion') or
nested, (i.e.  'codeunion.slack.username').
HELP
commands["unset"] = OptionParser.new do |opts|
  opts.instance_exec do
    self.banner = "Usage: codeunion config unset NAME"

    separator ""
    separator unset_subtext
    separator ""

    separator "Options:"
    on_tail("-h", "--help", "Print this help message") do
      puts self
      exit
    end
  end
end

parser.order!
command = ARGV.shift
if !command || !commands[command]
  puts parser
  exit
else
  commands[command].order!
  options[:command] = command
  options[:input] = ARGV
  result = CodeUnion::Command::Config.new(options).run
  puts result if result
end

